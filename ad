[33mcommit 88504510a716b8ba9f644d8baa653fbc6217bfb4[m[33m ([m[1;36mHEAD -> [m[1;32mfeature/testAccountAndAgency[m[33m, [m[1;31morigin/feature/testAccountAndAgency[m[33m)[m
Merge: 9bf62c7 c53d97d
Author: Marlon Rocha <marlonrocha30@gmail.com>
Date:   Mon Nov 8 15:47:35 2021 -0300

    Account and agency test

[1mdiff --cc src/main/java/br/com/codemasters/bluebank/services/AccountService.java[m
[1mindex baa0eaa,3f49134..44ed6de[m
[1m--- a/src/main/java/br/com/codemasters/bluebank/services/AccountService.java[m
[1m+++ b/src/main/java/br/com/codemasters/bluebank/services/AccountService.java[m
[36m@@@ -1,12 -1,6 +1,13 @@@[m
  package br.com.codemasters.bluebank.services;[m
  [m
  [m
[32m++[m
[32m +import java.util.List;[m
[32m +import java.util.stream.Collectors;[m
[32m +[m
[32m +import org.springframework.beans.factory.annotation.Autowired;[m
[32m +import org.springframework.stereotype.Service;[m
[32m +[m
  import br.com.codemasters.bluebank.domain.dtos.AccountDTO;[m
  import br.com.codemasters.bluebank.domain.dtos.AgencyDTO;[m
  import br.com.codemasters.bluebank.domain.dtos.BalanceDTO;[m
[36m@@@ -15,9 -9,14 +16,13 @@@[m [mimport br.com.codemasters.bluebank.doma[m
  import br.com.codemasters.bluebank.domain.entities.AgencyEntity;[m
  import br.com.codemasters.bluebank.domain.entities.ClientEntity;[m
  import br.com.codemasters.bluebank.domain.repository.AccountRepository;[m
[31m -import br.com.codemasters.bluebank.resources.exceptions.FundsNotAcceptException;[m
  import br.com.codemasters.bluebank.resources.exceptions.NotFoundException;[m
[31m -import org.springframework.beans.factory.annotation.Autowired;[m
[31m -import org.springframework.stereotype.Service;[m
[32m++[m
[32m +import br.com.codemasters.bluebank.resources.exceptions.FundsNotAcceptException;[m
  [m
[32m+ import java.util.List;[m
[32m+ import java.util.stream.Collectors;[m
[32m+ [m
  @Service[m
  public class AccountService {[m
  	[m
[36m@@@ -61,7 -53,7 +66,6 @@@[m
  	}[m
  	[m
  	public AccountEntity update(Long id, AccountDTO obj) {[m
[31m- 		//AccountEntity entity = repository.findById(id).get();[m
[31m -		AccountEntity entity = repository.findById(id).get();[m
  		AgencyEntity entityAgency = agencyService.findEntitytById(obj.getAgency()).get();[m
  		[m
  		return repository.save(AccountEntity.builder()[m
[1mdiff --cc src/test/java/br/com/codemasters/bluebank/services/AccountServiceTest.java[m
[1mindex 3eb90d0,0000000..439ea0c[m
mode 100644,000000..100644[m
[1m--- a/src/test/java/br/com/codemasters/bluebank/services/AccountServiceTest.java[m
[1m+++ b/src/test/java/br/com/codemasters/bluebank/services/AccountServiceTest.java[m
[36m@@@ -1,166 -1,0 +1,165 @@@[m
[32m +package br.com.codemasters.bluebank.services;[m
[32m +[m
[32m +import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;[m
[32m +import static org.junit.jupiter.api.Assertions.assertEquals;[m
[31m- import static org.mockito.ArgumentMatchers.any;[m
[31m- import static org.mockito.ArgumentMatchers.anyLong;[m
[31m- import static org.mockito.Mockito.doNothing;[m
[31m- import static org.mockito.Mockito.doThrow;[m
[32m +import static org.mockito.Mockito.when;[m
[32m +[m
[31m- import java.io.IOException;[m
[32m++[m
[32m +import java.util.ArrayList;[m
[32m +import java.util.List;[m
[32m +import java.util.Optional;[m
[32m +[m
[32m +import org.junit.jupiter.api.BeforeEach;[m
[32m +import org.junit.jupiter.api.Test;[m
[32m +import org.junit.jupiter.api.extension.ExtendWith;[m
[32m +import org.mockito.Mock;[m
[32m +import org.mockito.junit.jupiter.MockitoExtension;[m
[32m +[m
[32m +import br.com.codemasters.bluebank.domain.dtos.AccountDTO;[m
[32m +import br.com.codemasters.bluebank.domain.dtos.AgencyDTO;[m
[32m +import br.com.codemasters.bluebank.domain.dtos.BalanceDTO;[m
[32m +import br.com.codemasters.bluebank.domain.dtos.ClientDTO;[m
[32m +import br.com.codemasters.bluebank.domain.entities.AccountEntity;[m
[32m +import br.com.codemasters.bluebank.domain.entities.AgencyEntity;[m
[32m +import br.com.codemasters.bluebank.domain.entities.ClientEntity;[m
[32m +import br.com.codemasters.bluebank.domain.repository.AccountRepository;[m
[32m +import br.com.codemasters.bluebank.domain.repository.AgencyRepository;[m
[32m +import br.com.codemasters.bluebank.domain.repository.ClientRepository;[m
[32m +[m
[32m +[m
[32m +@ExtendWith(MockitoExtension.class)[m
[32m +class AccountServiceTest {[m
[32m +	@Mock[m
[32m +	AgencyService agencyService;[m
[32m +	[m
[32m +	@Mock[m
[32m +	ClientService clientService;[m
[32m +[m
[32m +	AccountService accountService;[m
[32m +	[m
[32m +	@Mock[m
[32m +	AccountRepository accountRepository;[m
[32m +	[m
[32m +	@Mock[m
[32m +	ClientRepository clientRepository;[m
[32m +	 [m
[32m +	@Mock[m
[32m +	AgencyRepository agencyRepository;[m
[32m +[m
[32m +    @BeforeEach[m
[32m +    void setup(){[m
[32m +        this.accountService = new AccountService(accountRepository, agencyService, clientService);[m
[31m-         /*this.agencyService = new AgencyService(agencyRepository);*/[m
[31m-         //this.clientService = new ClientService(clientRepository);[m
[32m +    }[m
[32m +    [m
[32m +    @Test[m
[32m +    public void findAll() {[m
[32m +    	List<AccountEntity> accountEntityList = new ArrayList<>();[m
[32m +    	accountEntityList.add(accountEntity());[m
[32m +    	accountEntityList.add(accountEntity2());[m
[32m +        when(accountRepository.findAll()).thenReturn(accountEntityList);[m
[32m +        List<AccountDTO> accountDTOAll =  accountService.findAll();[m
[32m +        assertEquals(accountDTOAll.get(0).getNumber(),accountEntityList.get(0).getNumber());[m
[32m +        assertEquals(accountDTOAll.get(1).getNumber(),accountEntityList.get(1).getNumber());[m
[32m +        assertEquals(2, accountDTOAll.size());[m
[32m +    }[m
[32m +    [m
[32m +    @Test[m
[32m +    public void findById(){[m
[32m +        when(accountRepository.findById(1L)).thenReturn(Optional.of(accountEntity()));[m
[32m +        AccountDTO accountDTOById =  accountService.findById(1L);[m
[32m +        assertEquals(accountDTOById.getId(),accountEntity().getId());[m
[32m +        assertEquals(accountDTOById.getNumber(),accountEntity().getNumber());[m
[32m +    }[m
[32m +    [m
[32m +    @Test[m
[32m +    public void findEntityById(){[m
[32m +        when(accountRepository.findById(1L)).thenReturn(Optional.of(accountEntity()));[m
[32m +        assertDoesNotThrow( () -> accountService.findEntityById(1L));[m
[32m +    }[m
[32m +    [m
[32m +    @Test[m
[32m +    public void findByAccount(){[m
[32m +        when(accountRepository.findByNumber("35691226-3")).thenReturn(Optional.of(accountEntity()));[m
[32m +        assertDoesNotThrow( () -> accountService.findByAccount("35691226-3"));[m
[32m +    }[m
[32m +    [m
[32m +    @Test[m
[32m +    public void create(){	[m
[32m +    	when(agencyService.findEntitytById(agencyEntity().getId())).thenReturn(Optional.of(agencyEntity()));[m
[32m +    	when(clientService.findEntityById(clientEntity().getId())).thenReturn(Optional.of(clientEntity()));[m
[32m +        assertDoesNotThrow( () -> accountService.create(accountDTO()));[m
[32m +    }[m
[32m +    [m
[32m +    @Test[m
[32m +    public void update(){[m
[32m +    	when(agencyService.findEntitytById(agencyEntity().getId())).thenReturn(Optional.of(agencyEntity()));[m
[32m +        assertDoesNotThrow( () -> accountService.update(accountDTO().getId(), accountDTO()));[m
[32m +    }[m
[32m +    [m
[32m +    @Test[m
[32m +    public void depositUpdate(){[m
[32m +    	when(accountRepository.findById(accountEntity().getId())).thenReturn(Optional.of(accountEntity()));[m
[32m +        assertDoesNotThrow( () -> accountService.depositUpdate(accountDTO().getId(), 300D));[m
[32m +    }[m
[32m +    [m
[32m +    [m
[32m +    @Test[m
[32m +    public void draftUpdate(){[m
[32m +    	when(accountRepository.findById(accountEntity().getId())).thenReturn(Optional.of(accountEntity()));[m
[32m +        assertDoesNotThrow( () -> accountService.draftUpdate(accountDTO().getId(), 300D));[m
[32m +    }[m
[32m +    [m
[32m +    [m
[32m +    @Test[m
[32m +    public void getBalance(){	[m
[32m +    	when(accountRepository.findByNumber(accountEntity().getNumber())).thenReturn(Optional.of(accountEntity()));[m
[31m-     	when(agencyService.findEntitytById(agencyEntity().getId())).thenReturn(Optional.of(agencyEntity()));[m
[32m++    	when(agencyService.findById(agencyEntity().getId())).thenReturn(agencyDTO());[m
[32m +    	when(clientService.getClientById(clientEntity().getId())).thenReturn(clientDTO());[m
[31m-         assertDoesNotThrow( () -> accountService.create(accountDTO()));[m
[32m++        assertDoesNotThrow( () -> accountService.getBalance(clientEntity().getId(),accountEntity().getNumber()));[m
[32m +    }[m
[32m +[m
[32m +    @Test[m
[32m +    public void delete(){[m
[32m +        when(accountRepository.findById(1L)).thenReturn(Optional.of(accountEntity()));[m
[32m +        assertDoesNotThrow( () -> accountService.delete(1L));[m
[32m +    }[m
[32m +    [m
[31m-     AgencyDTO agencydTO() {[m
[31m- 		return AgencyDTO.builder().code(1368L).name("AgÃªncia ButiÃ¡-RS").build();[m
[32m++    AgencyDTO agencyDTO() {[m
[32m++		return AgencyDTO.builder().code(136L).name("AgÃªncia ButiÃ¡-RS").build();[m
[32m +	}[m
[32m +    [m
[32m +    AgencyEntity agencyEntity() {[m
[32m +		return AgencyEntity.builder().code(1368L).name("AgÃªncia ButiÃ¡-RS").build();[m
[32m +	}[m
[32m +    [m
[31m-     ClientEntity clientEntity() {[m
[31m-        return ClientEntity.builder().name("Teste 01").adress("Adress teste").cpf("00913857050").rg("1094379641").email("teste.gmail.com").sex("Feminino").telephoneNumber("99583489").build();[m
[31m-     }[m
[31m-     [m
[31m-     ClientDTO clientDTO() {[m
[31m-         return ClientDTO.builder().name("Teste 01").adress("Adress teste").cpf("00913857050").rg("1094379641").email("teste.gmail.com").sex("Feminino").telephoneNumber("99583489").build();[m
[31m-      }[m
[31m-     [m
[32m +    AccountEntity accountEntity() {[m
[32m +		return AccountEntity.builder().number("35691226-3").balance(1000D).limit(3000D).agency(agencyEntity()).client(clientEntity()).build();[m
[32m +	}[m
[32m +    [m
[32m +    AccountEntity accountEntity2() {[m
[32m + 		return AccountEntity.builder().number("39571-6").balance(2000D).limit(4000D).agency(agencyEntity()).client(clientEntity()).build();[m
[32m + 	}[m
[32m +    [m
[32m +    AccountDTO accountDTO() {[m
[32m + 		return AccountDTO.builder().number("39571-6").balance(2000D).limit(4000D).agency(agencyEntity().getId()).client(1l).build();[m
[32m + 	}[m
[32m +    [m
[31m-     BalanceDTO balanceDTO() {[m
[31m-     	return BalanceDTO.builder().client(clientDTO()).agency(agencydTO()).account(accountDTO()).build();[m
[32m++    ClientDTO clientDTO() {[m
[32m++        return ClientDTO.builder().name("Teste 01").adress("Adress teste").cpf("00913857050").rg("1094379641").email("teste.gmail.com").sex("Feminino").telephoneNumber("99583489").build();[m
[32m++     }[m
[32m++    [m
[32m++    ClientEntity clientEntity() {[m
[32m++        ClientEntity client = new ClientEntity();[m
[32m++        client.setId(1L);[m
[32m++        client.setName("Teste 01");[m
[32m++        client.setAdress("Adress teste");[m
[32m++        client.setCpf("00913857050");[m
[32m++        client.setRg("1094379641");[m
[32m++        client.setEmail("teste.gmail.com");[m
[32m++        client.setSex("Feminino");[m
[32m++        client.setTelephoneNumber("99583489");[m
[32m++        return client;[m
[32m +    }[m
[32m +   [m
[32m +    [m
[32m +}[m
